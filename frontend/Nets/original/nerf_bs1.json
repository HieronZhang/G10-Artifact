[
  [
    8,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64]} })  ",
    "Dot",
    [
      [
        7,
        0
      ],
      [
        2,
        0
      ]
    ]
  ],
  [
    9,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1].call(`max`, [const(0).cast(input0[N0, N1].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} })  ",
    "Relu",
    [
      [
        8,
        0
      ]
    ]
  ],
  [
    10,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64]} })  ",
    "Dot",
    [
      [
        9,
        0
      ],
      [
        3,
        0
      ]
    ]
  ],
  [
    11,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1].call(`max`, [const(0).cast(input0[N0, N1].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} })  ",
    "Relu",
    [
      [
        10,
        0
      ]
    ]
  ],
  [
    12,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64]} })  ",
    "Dot",
    [
      [
        11,
        0
      ],
      [
        0,
        0
      ]
    ]
  ],
  [
    13,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1].call(`max`, [const(0).cast(input0[N0, N1].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} })  ",
    "Relu",
    [
      [
        12,
        0
      ]
    ]
  ],
  [
    14,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64]} })  ",
    "Dot",
    [
      [
        13,
        0
      ],
      [
        4,
        0
      ]
    ]
  ],
  [
    15,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1].call(`max`, [const(0).cast(input0[N0, N1].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} })  ",
    "Relu",
    [
      [
        14,
        0
      ]
    ]
  ],
  [
    16,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64]} })  ",
    "Dot",
    [
      [
        15,
        0
      ],
      [
        1,
        0
      ]
    ]
  ],
  [
    17,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1].call(`max`, [const(0).cast(input0[N0, N1].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} })  ",
    "Relu",
    [
      [
        16,
        0
      ]
    ]
  ],
  [
    18,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 64]} })  ",
    "Dot",
    [
      [
        17,
        0
      ],
      [
        6,
        0
      ]
    ]
  ],
  [
    19,
    " - einstein_v2(\"output0[N0, N1] = input0[N0, N1].call(`max`, [const(0).cast(input0[N0, N1].dtype())]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} })  ",
    "Relu",
    [
      [
        18,
        0
      ]
    ]
  ],
  [
    20,
    " - einstein_v2(\" output0[N, M] +=! input0[N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [2073600, 64]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [64, 3]} })  ",
    "Dot",
    [
      [
        19,
        0
      ],
      [
        5,
        0
      ]
    ]
  ],
  [
    21,
    "",
    "Result",
    [
      [
        20,
        0
      ]
    ]
  ]
]